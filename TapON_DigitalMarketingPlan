<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>TapON — Marketing Plan (Interactive)</title>
<style>
  :root{
    --bg:#0f172a; --card:#0b1220; --muted:#94a3b8; --accent:#06b6d4; --glass:rgba(255,255,255,0.03);
  }
  html,body{height:100%;margin:0;font-family:Inter,ui-sans-serif,system-ui,Segoe UI,Roboto,"Helvetica Neue",Arial;background:linear-gradient(180deg,#071428 0%, #071b2b 100%);color:#e6eef6}
  .wrap{max-width:1200px;margin:28px auto;padding:18px;background:linear-gradient(180deg, rgba(255,255,255,0.02), transparent);border-radius:12px;box-shadow:0 6px 30px rgba(2,6,23,0.6)}
  header{display:flex;flex-wrap:wrap;gap:12px;align-items:center;justify-content:space-between}
  header h1{font-size:20px;margin:0}
  .controls{display:flex;gap:8px;flex-wrap:wrap;align-items:center}
  .controls input[type="search"], .controls select{padding:8px 10px;border-radius:8px;border:1px solid rgba(255,255,255,0.06);background:var(--glass);color:inherit;min-width:160px}
  .btn{background:linear-gradient(90deg,var(--accent),#34d399);border:none;padding:8px 12px;border-radius:8px;color:#012;cursor:pointer;font-weight:600}
  .btn.ghost{background:transparent;border:1px solid rgba(255,255,255,0.06);color:var(--muted)}
  .table-wrap{overflow:auto;margin-top:16px;background:transparent;border-radius:10px;padding:8px}
  table{width:100%;border-collapse:collapse;min-width:900px}
  thead th{position:sticky;top:0;background:rgba(3,7,18,0.9);backdrop-filter:blur(6px);padding:10px;text-align:left;font-size:13px;color:var(--muted);border-bottom:1px solid rgba(255,255,255,0.03)}
  tbody td{padding:10px;border-bottom:1px solid rgba(255,255,255,0.03);vertical-align:top;font-size:14px}
  tbody tr:hover td{background:rgba(255,255,255,0.01)}
  .link{color:var(--accent);text-decoration:underline;cursor:pointer;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:inline-block;max-width:220px}
  .chip{display:inline-block;padding:4px 8px;border-radius:999px;font-size:12px;background:rgba(255,255,255,0.03);border:1px solid rgba(255,255,255,0.03)}
  .small{font-size:12px;color:var(--muted)}
  .toolbar{display:flex;gap:8px;align-items:center;flex-wrap:wrap;margin-top:12px}
  .pagination{margin-left:auto;display:flex;gap:8px;align-items:center}
  .page-btn{background:transparent;border:1px solid rgba(255,255,255,0.04);padding:6px 10px;border-radius:8px;color:var(--muted);cursor:pointer}
  @media (max-width:900px){
    table{min-width:720px}
  }
  @media (max-width:640px){
    header{flex-direction:column;align-items:flex-start}
    .controls{width:100%}
    .controls input, .controls select{flex:1}
    .pagination{width:100%;justify-content:flex-start}
  }
  /* simple sort arrow */
  th.sortable{cursor:pointer}
  th.sortable:after{content:'▴';opacity:0.12;margin-left:8px;font-size:11px}
  th.sortable.sorted-asc:after{content:'▴';opacity:0.9}
  th.sortable.sorted-desc:after{content:'▾';opacity:0.9}
  /* editable cell focus */
  td[contenteditable="true"]:focus{outline:2px solid rgba(6,182,212,0.15);border-radius:4px}
  .actions{display:flex;gap:6px}
  .danger{background:linear-gradient(90deg,#ff7a7a,#ff5a5a);color:#fff}
</style>
</head>
<body>
<div class="wrap" id="app">
  <header>
    <h1>TapON — Digital Marketing Plan</h1>
    <div class="controls">
      <input id="globalSearch" type="search" placeholder="Search (topic, platform, status, link...)" />
      <select id="filterPlatform"><option value="">All Platforms</option><option>Facebook</option></select>
      <select id="filterStatus"><option value="">All Statuses</option><option>Posted</option><option>In Progress</option><option>Ready to Post</option></select>
      <button class="btn" id="addRow">+ Add Row</button>
      <button class="btn ghost" id="resetStorage">Reset (clear saved edits)</button>
    </div>
  </header>

  <div class="table-wrap" role="region" aria-label="Marketing plan table">
    <table id="sheetTable">
      <thead>
        <tr>
          <th class="sortable" data-key="date">Date Time</th>
          <th class="sortable" data-key="topic">Topic / Content</th>
          <th class="sortable" data-key="format">Format</th>
          <th class="sortable" data-key="platform">Platform</th>
          <th class="sortable" data-key="goal">Goal</th>
          <th>Post Link</th>
          <th class="sortable" data-key="kpi">Post KPI</th>
          <th class="sortable" data-key="status">Status</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="tableBody">
        <!-- rows injected by JS -->
      </tbody>
    </table>
  </div>

  <div class="toolbar">
    <div class="small">Rows per page:
      <select id="rowsPerPage"><option>5</option><option selected>10</option><option>25</option></select>
    </div>
    <div style="margin-left:12px">
      <button class="btn" id="exportCsv">Export CSV</button>
      <label class="btn ghost" style="cursor:pointer">
        Import CSV
        <input id="importCsv" type="file" accept=".csv" style="display:none" />
      </label>
    </div>

    <div class="pagination" id="pagination">
      <button class="page-btn" id="prevPage">Prev</button>
      <div class="small" id="pageInfo">Page 1 / 1</div>
      <button class="page-btn" id="nextPage">Next</button>
    </div>
  </div>
</div>

<script>
/*
  Data source: pulled from your Google Sheet (visible rows).
  I used the sheet content you shared and converted visible rows into this table.
  The table is editable inline (double-click a cell), persisted to localStorage automatically,
  and supports sort, search, filter, pagination, CSV export/import.
*/

const STORAGE_KEY = 'tapon_marketing_plan_v1';

const initialData = [
  {
    date: 'Wed, Sept 24, 2025 8:00 AM',
    topic: 'Creation of Social Media Page',
    format: '',
    platform: 'Facebook',
    goal: 'Become a platform for TapON to advertise its branding.',
    link: 'https://www.facebook.com/taponmagnet',
    kpi: 'https://business.facebook.com/latest/insights/overview',
    status: 'Posted'
  },
  {
    date: 'Wed, Sept 24, 2025 8:00 AM',
    topic: 'Posting of HAND-DRAWN Profile Photo',
    format: 'Image (Graphic Art)',
    platform: 'Facebook',
    goal: 'Post a teaser of what’s about to drop — playful intro to TapON',
    link: 'https://www.facebook.com/share/16eAodb6Th/',
    kpi: 'https://business.facebook.com/latest/insights/object_insights/?content_id=122093558283049326',
    status: 'Posted'
  },
  {
    date: 'Wed, Sept 24, 2025 8:00 AM',
    topic: 'Posting of HAND-DRAWN Cover Page',
    format: 'Image (Graphic Art)',
    platform: 'Facebook',
    goal: 'Post a teaser of what’s about to drop — playful intro to TapON',
    link: 'https://www.facebook.com/photo/?fbid=122093557863049326',
    kpi: 'https://business.facebook.com/latest/insights/object_insights/?content_id=122093557863049326',
    status: 'Posted'
  },
  {
    date: 'Thu, Sept 25, 2025 12:00 PM',
    topic: "Posting of TapON's REAL Profile Photo",
    format: 'Image (Graphic Art)',
    platform: 'Facebook',
    goal: "To officially launch TapON Facebook Page",
    link: 'https://www.facebook.com/share/19GgKTnV7m/',
    kpi: 'https://business.facebook.com/latest/insights/object_insights/?content_id=122094238845049326',
    status: 'Posted'
  },
  {
    date: 'Thu, Sept 25, 2025 12:00 PM',
    topic: "Posting of TapON's REAL Cover Page",
    format: 'Image (Graphic Art)',
    platform: 'Facebook',
    goal: "To officially launch TapON Facebook Page",
    link: 'https://www.facebook.com/photo?fbid=122094239229049326',
    kpi: 'https://business.facebook.com/latest/insights/object_insights/?content_id=122094239229049326',
    status: 'Posted'
  },
  {
    date: 'Thu, Sept 25, 2025 4:00 PM',
    topic: 'Introducing TapON: Get to know TapON',
    format: 'Image (Graphic Art)',
    platform: 'Facebook',
    goal: 'To officially introduce TapON to our audience',
    link: 'https://www.facebook.com/share/p/1GV7ouKqJK/',
    kpi: 'https://business.facebook.com/latest/insights/object_insights/?content_id=122094321867049326',
    status: 'Posted'
  },
  {
    date: 'Fri, Sept 26, 2025 2:00 PM',
    topic: 'Introducing TapON: Uses of TapON',
    format: 'Image (Graphic Art)',
    platform: 'Facebook',
    goal: 'To officially introduce the uses of TapON',
    link: 'https://www.facebook.com/share/p/1758cEgWCK/',
    kpi: 'https://business.facebook.com/latest/insights/object_insights/?content_id=122094829953049326',
    status: 'Posted'
  },
  {
    date: 'Sat, Sept 27, 2025 8:00 PM',
    topic: "Introducing TapON: Video Demonstration",
    format: 'Advertisement Video (Short Video Ad)',
    platform: 'Facebook',
    goal: "Post a teaser of TapON's capabilities — show how it works",
    link: 'https://www.facebook.com/share/v/1CvmcBd8VQ/',
    kpi: 'https://business.facebook.com/latest/insights/object_insights/?content_id=122095801023049326',
    status: 'Posted'
  },
  {
    date: 'Sun, Sept 28, 2025 8:00 PM',
    topic: 'Introducing the Masterminds',
    format: 'Image (Graphic Art)',
    platform: 'Facebook',
    goal: 'To introduce the people behind TapON',
    link: '',
    kpi: '',
    status: 'In Progress'
  },
  {
    date: 'Tue, Sept 30, 2025 8:00 AM',
    topic: 'Tap-ON Hunt Video / Image',
    format: '',
    platform: 'Facebook',
    goal: 'To gather engagements through a trending content (Mini-game); introduce winners',
    link: '',
    kpi: '',
    status: 'Ready to Post'
  }
];

let state = {
  data: loadData(),
  sortKey: null,
  sortDir: 1,
  page: 1,
  rowsPerPage: 10,
  filters: { platform: '', status: '', q: '' }
};

function loadData(){
  try{
    const raw = localStorage.getItem(STORAGE_KEY);
    if(raw) return JSON.parse(raw);
  }catch(e){}
  return initialData.slice();
}

function persist(){
  localStorage.setItem(STORAGE_KEY, JSON.stringify(state.data));
}

const tableBody = document.getElementById('tableBody');
const globalSearch = document.getElementById('globalSearch');
const filterPlatform = document.getElementById('filterPlatform');
const filterStatus = document.getElementById('filterStatus');
const rowsPerPageEl = document.getElementById('rowsPerPage');
const pageInfo = document.getElementById('pageInfo');

function uniquePlatforms(){
  const set = new Set(state.data.map(r=>r.platform).filter(Boolean));
  return Array.from(set).sort();
}

function renderFilters(){
  // platform options
  const current = filterPlatform.value;
  filterPlatform.innerHTML = '<option value="">All Platforms</option>';
  uniquePlatforms().forEach(p=>{
    const opt = document.createElement('option');
    opt.value = p; opt.textContent = p;
    filterPlatform.appendChild(opt);
  });
  filterPlatform.value = current || '';
}

function renderTable(){
  renderFilters();
  // filter & search
  const q = state.filters.q.trim().toLowerCase();
  let filtered = state.data.filter(row=>{
    if(state.filters.platform && row.platform !== state.filters.platform) return false;
    if(state.filters.status && row.status !== state.filters.status) return false;
    if(!q) return true;
    return Object.values(row).some(v=>String(v||'').toLowerCase().includes(q));
  });

  // sort
  if(state.sortKey){
    filtered.sort((a,b)=>{
      const A = String(a[state.sortKey]||'').toLowerCase();
      const B = String(b[state.sortKey]||'').toLowerCase();
      if(A<B) return -1*state.sortDir;
      if(A>B) return 1*state.sortDir;
      return 0;
    });
  }

  // pagination
  const total = filtered.length;
  const rowsPerPage = state.rowsPerPage;
  const pages = Math.max(1, Math.ceil(total/rowsPerPage));
  if(state.page > pages) state.page = 1;
  const start = (state.page-1)*rowsPerPage;
  const pageSlice = filtered.slice(start, start+rowsPerPage);

  tableBody.innerHTML = '';
  pageSlice.forEach((row, idx)=>{
    const tr = document.createElement('tr');

    // helper to create td
    function ctd(key, content, isLink=false){
      const td = document.createElement('td');
      td.dataset.key = key;
      td.title = String(content||'');
      if(isLink && content){
        const a = document.createElement('a');
        a.href = content; a.target = '_blank'; a.rel='noopener noreferrer';
        a.className = 'link';
        a.textContent = (String(content).length>50)? String(content).slice(0,48)+'…' : content;
        td.appendChild(a);
      } else {
        td.textContent = content || '';
      }
      td.setAttribute('contenteditable','true');
      // save on blur
      td.addEventListener('blur', (e)=>{
        const newVal = td.textContent.trim();
        const globalIndex = state.data.indexOf(row);
        if(globalIndex>=0){
          state.data[globalIndex][key] = newVal;
          persist();
          renderTable();
        }
      });
      // prevent return newline
      td.addEventListener('keydown', (e)=>{
        if(e.key === 'Enter'){ e.preventDefault(); td.blur(); }
      });
      return td;
    }

    tr.appendChild(ctd('date', row.date));
    tr.appendChild(ctd('topic', row.topic));
    tr.appendChild(ctd('format', row.format));
    tr.appendChild(ctd('platform', row.platform));
    tr.appendChild(ctd('goal', row.goal));
    // link cell - keep clickable by having a small anchor; but still editable text will update the link URL
    const linkTd = ctd('link', row.link, !!row.link);
    tr.appendChild(linkTd);
    tr.appendChild(ctd('kpi', row.kpi));
    tr.appendChild(ctd('status', row.status));
    const actions = document.createElement('td');
    actions.className = 'actions';
    const openBtn = document.createElement('button');
    openBtn.className = 'page-btn';
    openBtn.textContent = 'Open';
    openBtn.title = 'Open post link in new tab';
    openBtn.addEventListener('click', ()=>{
      const url = row.link || row.kpi;
      if(url) window.open(url,'_blank','noopener');
      else alert('No link available for this row.');
    });
    const delBtn = document.createElement('button');
    delBtn.className = 'page-btn danger';
    delBtn.textContent = 'Delete';
    delBtn.title = 'Delete this row';
    delBtn.addEventListener('click', ()=>{
      if(!confirm('Delete this row?')) return;
      const idx = state.data.indexOf(row);
      if(idx>=0){ state.data.splice(idx,1); persist(); renderTable(); }
    });
    actions.appendChild(openBtn);
    actions.appendChild(delBtn);
    tr.appendChild(actions);

    tableBody.appendChild(tr);
  });

  // page info
  pageInfo.textContent = `Page ${state.page} / ${pages} — ${total} row${total!==1?'s':''}`;
  // highlight sorted column headers
  document.querySelectorAll('th.sortable').forEach(th=>{
    th.classList.remove('sorted-asc','sorted-desc');
    if(th.dataset.key === state.sortKey){
      th.classList.add(state.sortDir===1? 'sorted-asc':'sorted-desc');
    }
  });
}

document.querySelectorAll('th.sortable').forEach(th=>{
  th.addEventListener('click', ()=>{
    const key = th.dataset.key;
    if(state.sortKey === key) state.sortDir = -state.sortDir;
    else { state.sortKey = key; state.sortDir = 1; }
    renderTable();
  });
});

globalSearch.addEventListener('input', e=>{
  state.filters.q = e.target.value;
  state.page = 1;
  renderTable();
});
filterPlatform.addEventListener('change', e=>{
  state.filters.platform = e.target.value;
  state.page = 1;
  renderTable();
});
filterStatus.addEventListener('change', e=>{
  state.filters.status = e.target.value;
  state.page = 1;
  renderTable();
});
rowsPerPageEl.addEventListener('change', e=>{
  state.rowsPerPage = parseInt(e.target.value,10)||10;
  state.page = 1;
  renderTable();
});
document.getElementById('prevPage').addEventListener('click', ()=>{
  if(state.page>1){ state.page--; renderTable(); }
});
document.getElementById('nextPage').addEventListener('click', ()=>{
  state.page++; renderTable();
});

// add row
document.getElementById('addRow').addEventListener('click', ()=>{
  const newRow = {date:'',topic:'',format:'',platform:'Facebook',goal:'',link:'',kpi:'',status:'Ready to Post'};
  state.data.unshift(newRow);
  persist();
  renderTable();
});

// export CSV
function toCSV(rows){
  const cols = ['date','topic','format','platform','goal','link','kpi','status'];
  const csv = [cols.join(',')].concat(rows.map(r=>cols.map(c=>{
    // quote values that include comma or quote or newline
    const v = String(r[c]||'');
    const needs = v.includes(',') || v.includes('"') || v.includes('\n');
    if(needs) return '"' + v.replace(/"/g,'""') + '"';
    return v;
  }).join(',')));
  return csv.join('\n');
}

document.getElementById('exportCsv').addEventListener('click', ()=>{
  const csv = toCSV(state.data);
  const blob = new Blob([csv], {type:'text/csv;charset=utf-8;'});
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url; a.download = 'tapon-marketing-plan.csv';
  document.body.appendChild(a); a.click(); a.remove();
  URL.revokeObjectURL(url);
});

// import CSV (simple)
document.getElementById('importCsv').addEventListener('change', function(e){
  const f = this.files[0];
  if(!f) return;
  const reader = new FileReader();
  reader.onload = (ev)=>{
    try{
      const txt = ev.target.result;
      const lines = txt.split(/\r?\n/).filter(Boolean);
      const headers = lines.shift().split(',').map(s=>s.trim().replace(/^"|"$/g,''));
      const parsed = lines.map(line=>{
        // simple CSV split that handles quoted fields
        const row = [];
        let cur = '', inQuote=false;
        for(let i=0;i<line.length;i++){
          const ch = line[i];
          if(ch === '"' ){ inQuote = !inQuote; cur += ch; continue; }
          if(ch === ',' && !inQuote){ row.push(cur.replace(/^"|"$/g,'').replace(/""/g,'"')); cur=''; continue; }
          cur += ch;
        }
        if(cur !== '') row.push(cur.replace(/^"|"$/g,'').replace(/""/g,'"'));
        const obj = {};
        headers.forEach((h,i)=> obj[h] = row[i]||'');
        return {
          date: obj.date||'',
          topic: obj.topic||'',
          format: obj.format||'',
          platform: obj.platform||'',
          goal: obj.goal||'',
          link: obj.link||'',
          kpi: obj.kpi||'',
          status: obj.status||''
        };
      });
      if(parsed.length){
        if(confirm('Importing will replace existing data. Continue?')){
          state.data = parsed;
          persist();
          renderTable();
        }
      } else alert('No rows parsed from CSV.');
    }catch(err){ alert('Failed to parse CSV: ' + err.message); }
  };
  reader.readAsText(f);
  this.value = '';
});

// reset storage
document.getElementById('resetStorage').addEventListener('click', ()=>{
  if(confirm('Clear saved edits and restore original data?')) {
    localStorage.removeItem(STORAGE_KEY);
    state.data = initialData.slice();
    renderTable();
  }
});

// reset page when window focus (optional)
window.addEventListener('focus', ()=>{ renderTable(); });

// initial render
renderTable();
</script>
</body>
</html>
